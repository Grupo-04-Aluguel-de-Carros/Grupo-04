generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @unique @default(uuid())
  name        String
  surname     String
  email       String    @unique
  cpf         String    @unique
  phoneNumber String
  age         String
  password    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        Role      @default(CLIENT)
  Address     Address[]
  Booking     Booking[]
}

model Address {
  id           String   @id @unique @default(uuid())
  cep          String
  street       String
  city         String
  state        String
  number       String
  neighborhood String
  complement   String
  storeId      String?
  userId       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Store        Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  User         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Store {
  id        String          @id @unique @default(uuid())
  name      String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  Address   Address[]
  brands    BrandOnStores[]
  Car       Car[]
  Booking   Booking[]
  Brand     Brand[]         @relation("BrandToStore")
}

model Brand {
  id        String          @id @unique @default(uuid())
  name      String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  stores    BrandOnStores[]
  Car       Car[]
  Store     Store[]         @relation("BrandToStore")
}

model BrandOnStores {
  storeId   String
  brandId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brand     Brand    @relation(fields: [brandId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])

  @@id([storeId, brandId])
}

model Car {
  id          String           @id @unique @default(uuid())
  name        String
  color       String
  brandId     String?
  storeId     String?
  createdAt   DateTime         @default(now())
  description String?
  model       String
  updatedAt   DateTime         @updatedAt
  value       Float
  year        String
  available   Boolean
  Booking     Booking[]
  Brand       Brand?           @relation(fields: [brandId], references: [id])
  Store       Store?           @relation(fields: [storeId], references: [id])
  features    FeaturesOnCars[]
  Images      Images[]
  Feature     Feature[]        @relation("CarToFeature")
}

model Booking {
  id          String   @id @unique @default(uuid())
  inicialDate DateTime
  finalDate   DateTime
  carId       String?
  userId      String?
  storeId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Store       Store?   @relation(fields: [storeId], references: [id])
  Car         Car?     @relation(fields: [carId], references: [id])
  User        User?    @relation(fields: [userId], references: [id])
}

model FeaturesOnCars {
  featureId String
  carId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  car       Car      @relation(fields: [carId], references: [id])
  feature   Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@id([carId, featureId])
}

model Feature {
  id            String           @id @unique @default(uuid())
  massageSystem Boolean
  shielding     Boolean
  selfDriving   Boolean
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  sunRoof       Boolean
  automatic     Boolean
  name          String
  cars          FeaturesOnCars[]
  Car           Car[]            @relation("CarToFeature")
}

model Images {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carId     String?
  urlBrand  String
  name      String
  urlCar    String[]
  Car       Car?     @relation(fields: [carId], references: [id])
}

enum Role {
  ADMIN
  USER
  CLIENT
}
